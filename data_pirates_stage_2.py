# -*- coding: utf-8 -*-
"""Data Pirates - Stage 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pvx5g0aXNs9MN7TQDY5RdkCOe1HZZDCv

Luh Devany <br>
Fadhrizal Hafidi <br>
M Miftah Thaha <br>
Ghislaine Dwiani <br>
Irfan Muhamad <br>
Winda Pebriyanti <br>
Raditya Angkasa <br>
Alvito Farandy <br>
Ericson P.M SIlalahi
"""

import pandas as pd
import numpy as np

#Data visualization

import matplotlib.pyplot as plt
import seaborn as sns

#Warning

import warnings 
warnings.simplefilter(action = 'ignore', category = FutureWarning)

!pip install sidetable

import sidetable as stb

!gdown --id 1Hrzb8-td5D0P4GLks3QBtzkCUzpszzP3

df = pd.read_csv('/content/TravelInsurancePrediction.csv')
df.head()

df = df.drop('Unnamed: 0' , axis = 1)

"""# Data Cleansing

**A. Handle missing values**
"""

df.isnull().sum()

"""Data tidak memiliki missing value

**B. Handle duplicated data**
"""

df.duplicated().sum()

"""Data memiki duplikasi namun akan diabaikan karena data tidak memiliki unique ID sehingga tidak dapat memastikan apakah data tersebut adalah duplikasi atau tidak

**C. Handle outliers**
"""

num = df.select_dtypes(include=[np.number]) 
cat = df.select_dtypes(exclude=[np.number])

numerical = num.columns
categorical = cat.columns

features = numerical
plt.figure(figsize=(12, 5))
for i in range(0, len(features)):
    plt.subplot(2, len(features), i+1)
    sns.boxplot(y=df[features[i]], color='gray')
    plt.tight_layout()

"""Terlihat seluruh fitur tidak memiliki outlier sehingga tidak perlu melakukan *outlier handling*

**D. Feature transformation**
"""

from sklearn.preprocessing import MinMaxScaler, StandardScaler

df['AnnualIncome_norm']= MinMaxScaler().fit_transform(df['AnnualIncome'].values.reshape(len(df),1))
df['FamilyMembers_norm']= MinMaxScaler().fit_transform(df['FamilyMembers'].values.reshape(len(df),1))
df['Age_norm']= MinMaxScaler().fit_transform(df['Age'].values.reshape(len(df),1))
df.describe()

"""**E. Feature encoding**

Feature Encoding dilakukan terhadapat feature catergorical agar menjadi feature numeric, dalam dataframe ini yaitu features 'Employment Type', 'GraduateOrNot', 'FrequentFlyer', 'EverTravelledAbroad'.

Yes : 1 , No : 0
"""

df['FrequentFlyer'] = df['FrequentFlyer'].map({'Yes': 1, 'No': 0})
df['EverTravelledAbroad'] = df['EverTravelledAbroad'].map({'Yes': 1, 'No': 0})
df['GraduateOrNot'] = df['GraduateOrNot'].map({'Yes': 1, 'No': 0})

"""Government Sector : 1, Private Sector/Self Employed : 0

"""

df["Employment Type"] = df["Employment Type"].map({"Government Sector" : 1, "Private Sector/Self Employed" : 0})

"""Menggunakan Label Encoding karena distinct value dari data diatas = 2

**F. Handle class imbalance**
"""

df.stb.freq(['TravelInsurance'], cum_cols=False)

""":Dilihat dari persentase data diatas kami tidak memerlukan class imbalance handling.

#Feature Engineering

**A. Feature selection**
"""

df.info()

df.reset_index()
df = df[['Age_norm','Employment Type','GraduateOrNot','FamilyMembers_norm','ChronicDiseases','FrequentFlyer','EverTravelledAbroad','AnnualIncome_norm','TravelInsurance']]
df.sample(5)

"""Semua feature relevan untuk modelling, selection pada feature yang sudah di normalisasi (AnnualIncome, FamilyMembers & Age)

**B. Feature extraction**

Semua nilai feauture sudah sederhana sehingga tidak perlu melakukan feature 

*   List item
*   List item

extraction

**C. Additional Feature**


*   "InsuranceType"

> 1. Essential = 100% coverage up to $50,000

> 2. Deluxe = 100% coverage up to $100,0000

> 3. Plus = 100% coverage up to $150,0000

*   "TripLength"

> 1. Less than 7 days

> 2. Up to 14 days

> 3. more than 14 days



*   "Destination"

> 1. Asia

> 2. Europe

> 3. Africa

> 4. North America

> 5. South America

> 6. Antarctica

> 7. Australia

> 8. Domestic

*   Covid Vaccinated Dosage 1 (Yes/No)

*   Covid Vaccinated Dosage 2 (Yes/No)

*   Covid Vaccinated Dosage 3 (Yes/No)

*   Airline (Garuda, Air Asia, Qatar Airways, Singapore Airline, etc)
"""





